// Code generated by protoc-gen-go.
// source: mapreduce.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	mapreduce.proto

It has these top-level messages:
	MapperRequest
	MapperResponse
	ReducerRequest
	ReducerResponse
	WorkRequest
	WorkConfigResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type MapperRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *MapperRequest) Reset()         { *m = MapperRequest{} }
func (m *MapperRequest) String() string { return proto1.CompactTextString(m) }
func (*MapperRequest) ProtoMessage()    {}

type MapperResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *MapperResponse) Reset()         { *m = MapperResponse{} }
func (m *MapperResponse) String() string { return proto1.CompactTextString(m) }
func (*MapperResponse) ProtoMessage()    {}

type ReducerRequest struct {
	Key   string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *ReducerRequest) Reset()         { *m = ReducerRequest{} }
func (m *ReducerRequest) String() string { return proto1.CompactTextString(m) }
func (*ReducerRequest) ProtoMessage()    {}

type ReducerResponse struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ReducerResponse) Reset()         { *m = ReducerResponse{} }
func (m *ReducerResponse) String() string { return proto1.CompactTextString(m) }
func (*ReducerResponse) ProtoMessage()    {}

type WorkRequest struct {
	TaskID string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
}

func (m *WorkRequest) Reset()         { *m = WorkRequest{} }
func (m *WorkRequest) String() string { return proto1.CompactTextString(m) }
func (*WorkRequest) ProtoMessage()    {}

type WorkConfigResponse struct {
	Key   []string `protobuf:"bytes,1,rep,name=key" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
}

func (m *WorkConfigResponse) Reset()         { *m = WorkConfigResponse{} }
func (m *WorkConfigResponse) String() string { return proto1.CompactTextString(m) }
func (*WorkConfigResponse) ProtoMessage()    {}

func init() {
}

// Client API for Mapper service

type MapperClient interface {
	GetEmitResult(ctx context.Context, in *MapperRequest, opts ...grpc.CallOption) (Mapper_GetEmitResultClient, error)
}

type mapperClient struct {
	cc *grpc.ClientConn
}

func NewMapperClient(cc *grpc.ClientConn) MapperClient {
	return &mapperClient{cc}
}

func (c *mapperClient) GetEmitResult(ctx context.Context, in *MapperRequest, opts ...grpc.CallOption) (Mapper_GetEmitResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mapper_serviceDesc.Streams[0], c.cc, "/proto.Mapper/GetEmitResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapperGetEmitResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mapper_GetEmitResultClient interface {
	Recv() (*MapperResponse, error)
	grpc.ClientStream
}

type mapperGetEmitResultClient struct {
	grpc.ClientStream
}

func (x *mapperGetEmitResultClient) Recv() (*MapperResponse, error) {
	m := new(MapperResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Mapper service

type MapperServer interface {
	GetEmitResult(*MapperRequest, Mapper_GetEmitResultServer) error
}

func RegisterMapperServer(s *grpc.Server, srv MapperServer) {
	s.RegisterService(&_Mapper_serviceDesc, srv)
}

func _Mapper_GetEmitResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MapperRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapperServer).GetEmitResult(m, &mapperGetEmitResultServer{stream})
}

type Mapper_GetEmitResultServer interface {
	Send(*MapperResponse) error
	grpc.ServerStream
}

type mapperGetEmitResultServer struct {
	grpc.ServerStream
}

func (x *mapperGetEmitResultServer) Send(m *MapperResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Mapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Mapper",
	HandlerType: (*MapperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEmitResult",
			Handler:       _Mapper_GetEmitResult_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for Reducer service

type ReducerClient interface {
	GetCollectResult(ctx context.Context, in *ReducerRequest, opts ...grpc.CallOption) (Reducer_GetCollectResultClient, error)
}

type reducerClient struct {
	cc *grpc.ClientConn
}

func NewReducerClient(cc *grpc.ClientConn) ReducerClient {
	return &reducerClient{cc}
}

func (c *reducerClient) GetCollectResult(ctx context.Context, in *ReducerRequest, opts ...grpc.CallOption) (Reducer_GetCollectResultClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Reducer_serviceDesc.Streams[0], c.cc, "/proto.Reducer/GetCollectResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &reducerGetCollectResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Reducer_GetCollectResultClient interface {
	Recv() (*ReducerResponse, error)
	grpc.ClientStream
}

type reducerGetCollectResultClient struct {
	grpc.ClientStream
}

func (x *reducerGetCollectResultClient) Recv() (*ReducerResponse, error) {
	m := new(ReducerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Reducer service

type ReducerServer interface {
	GetCollectResult(*ReducerRequest, Reducer_GetCollectResultServer) error
}

func RegisterReducerServer(s *grpc.Server, srv ReducerServer) {
	s.RegisterService(&_Reducer_serviceDesc, srv)
}

func _Reducer_GetCollectResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReducerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReducerServer).GetCollectResult(m, &reducerGetCollectResultServer{stream})
}

type Reducer_GetCollectResultServer interface {
	Send(*ReducerResponse) error
	grpc.ServerStream
}

type reducerGetCollectResultServer struct {
	grpc.ServerStream
}

func (x *reducerGetCollectResultServer) Send(m *ReducerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Reducer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Reducer",
	HandlerType: (*ReducerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCollectResult",
			Handler:       _Reducer_GetCollectResult_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for Master service

type MasterClient interface {
	GetWork(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*WorkConfigResponse, error)
}

type masterClient struct {
	cc *grpc.ClientConn
}

func NewMasterClient(cc *grpc.ClientConn) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) GetWork(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*WorkConfigResponse, error) {
	out := new(WorkConfigResponse)
	err := grpc.Invoke(ctx, "/proto.Master/GetWork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Master service

type MasterServer interface {
	GetWork(context.Context, *WorkRequest) (*WorkConfigResponse, error)
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_GetWork_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(WorkRequest)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MasterServer).GetWork(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWork",
			Handler:    _Master_GetWork_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
