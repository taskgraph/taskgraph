// Code generated by protoc-gen-go.
// source: bwmf.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	bwmf.proto

It has these top-level messages:
	Request
	Response
	MatrixShard
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Request struct {
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto1.CompactTextString(m) }
func (*Request) ProtoMessage()    {}

type Response struct {
	BlockId uint64       `protobuf:"varint,1,opt,name=blockId" json:"blockId,omitempty"`
	Shard   *MatrixShard `protobuf:"bytes,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetShard() *MatrixShard {
	if m != nil {
		return m.Shard
	}
	return nil
}

type MatrixShard struct {
	Rows []*MatrixShard_Row `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (m *MatrixShard) Reset()         { *m = MatrixShard{} }
func (m *MatrixShard) String() string { return proto1.CompactTextString(m) }
func (*MatrixShard) ProtoMessage()    {}

func (m *MatrixShard) GetRows() []*MatrixShard_Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

type MatrixShard_Row struct {
	RowId  uint32    `protobuf:"varint,1,opt,name=rowId" json:"rowId,omitempty"`
	ColIds []uint32  `protobuf:"varint,2,rep,name=colIds" json:"colIds,omitempty"`
	Values []float32 `protobuf:"fixed32,3,rep,name=values" json:"values,omitempty"`
}

func (m *MatrixShard_Row) Reset()         { *m = MatrixShard_Row{} }
func (m *MatrixShard_Row) String() string { return proto1.CompactTextString(m) }
func (*MatrixShard_Row) ProtoMessage()    {}

func init() {
}

// Client API for BlockData service

type BlockDataClient interface {
	GetTShard(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetDShard(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type blockDataClient struct {
	cc *grpc.ClientConn
}

func NewBlockDataClient(cc *grpc.ClientConn) BlockDataClient {
	return &blockDataClient{cc}
}

func (c *blockDataClient) GetTShard(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.BlockData/GetTShard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockDataClient) GetDShard(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/proto.BlockData/GetDShard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockData service

type BlockDataServer interface {
	GetTShard(context.Context, *Request) (*Response, error)
	GetDShard(context.Context, *Request) (*Response, error)
}

func RegisterBlockDataServer(s *grpc.Server, srv BlockDataServer) {
	s.RegisterService(&_BlockData_serviceDesc, srv)
}

func _BlockData_GetTShard_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Request)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockDataServer).GetTShard(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BlockData_GetDShard_Handler(srv interface{}, ctx context.Context, buf []byte) (interface{}, error) {
	in := new(Request)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(BlockDataServer).GetDShard(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BlockData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockData",
	HandlerType: (*BlockDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTShard",
			Handler:    _BlockData_GetTShard_Handler,
		},
		{
			MethodName: "GetDShard",
			Handler:    _BlockData_GetDShard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
