// Code generated by protoc-gen-go.
// source: regression.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	regression.proto

It has these top-level messages:
	Input
	Parameter
	Gradient
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Input struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *Input) Reset()         { *m = Input{} }
func (m *Input) String() string { return proto1.CompactTextString(m) }
func (*Input) ProtoMessage()    {}

type Parameter struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Parameter) Reset()         { *m = Parameter{} }
func (m *Parameter) String() string { return proto1.CompactTextString(m) }
func (*Parameter) ProtoMessage()    {}

type Gradient struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Gradient) Reset()         { *m = Gradient{} }
func (m *Gradient) String() string { return proto1.CompactTextString(m) }
func (*Gradient) ProtoMessage()    {}

func init() {
}

// Client API for Regression service

type RegressionClient interface {
	GetParameter(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Parameter, error)
	GetGradient(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Gradient, error)
}

type regressionClient struct {
	cc *grpc.ClientConn
}

func NewRegressionClient(cc *grpc.ClientConn) RegressionClient {
	return &regressionClient{cc}
}

func (c *regressionClient) GetParameter(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Parameter, error) {
	out := new(Parameter)
	err := grpc.Invoke(ctx, "/proto.Regression/GetParameter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regressionClient) GetGradient(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Gradient, error) {
	out := new(Gradient)
	err := grpc.Invoke(ctx, "/proto.Regression/GetGradient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Regression service

type RegressionServer interface {
	GetParameter(context.Context, *Input) (*Parameter, error)
	GetGradient(context.Context, *Input) (*Gradient, error)
}

func RegisterRegressionServer(s *grpc.Server, srv RegressionServer) {
	s.RegisterService(&_Regression_serviceDesc, srv)
}

func _Regression_GetParameter_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(Input)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RegressionServer).GetParameter(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Regression_GetGradient_Handler(srv interface{}, ctx context.Context, buf []byte) (proto1.Message, error) {
	in := new(Input)
	if err := proto1.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RegressionServer).GetGradient(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Regression_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Regression",
	HandlerType: (*RegressionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParameter",
			Handler:    _Regression_GetParameter_Handler,
		},
		{
			MethodName: "GetGradient",
			Handler:    _Regression_GetGradient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
